//==================================================================//
//
// gameProperties
// - Properties of the game frame (width/height, etc.)
//
//==================================================================//

var gameScreenProperties = {};
gameScreenProperties.width = 1200; // Game frame width in pixels
gameScreenProperties.height = 1200; // Game frame height in pixels

//==================================================================//
//
// Game Variables
// - For handling gameplay resources/logic
//
//==================================================================//

//------------------------------------------------------------------//
// Grid Arrays
// - Stores the data+properties of the grid space
//------------------------------------------------------------------//

var gridWidth = 6;
var gridHeight = 3;
var gridMaxSize = gridWidth * gridHeight; // The maximum number of tiles for the grid
var gridTileSize = 100;
var gridOffsetX = gridTileSize * 3;
var totalIncome = new Array(gridMaxSize);  //array with 25 indices to correspond to the tiles
var power = new Array(gridMaxSize); //array with 25 indices to correspond to the tiles
var isOccupied = new Array(gridMaxSize); //occupied status of grid tiles
var totalPollution = new Array(gridMaxSize); //the pollution values generated by all grid tiles

var revenue = 0;
var incomeText;
var money; //player's money
var co2;
var pollution = .01;
var residualPollution = 0;
var voltageWinCondition = 500;
var death;
var deathCause = ''; // 'co2'/'powerless'
var win;

var solarCost;
var solarTimer;

var coalCost;
var coalTimer;

var oilCost;
var oilTimer;

var windCost;
var windTimer;

var hydroCost;
var hydroTimer;

var nuclearCost;
var nuclearTimer;

var repair;

var buildingPlaced;

var bgmPlaying;

//==================================================================//
//
// gameStates
// - Setup the game state functions
//
//==================================================================//

var gameStates = {};

//------------------------------------------------------------------//
// State: Preloader
// - Handles the initialization of all game assets
//------------------------------------------------------------------//

gameStates.Preloader = function(game){};
gameStates.Preloader.prototype = {
    preload: function(){
        console.log('Preloader: preload');
        loadAllAssets();        
    },
    create: function(){
        console.log('Preloader: create');
        game.state.start('Start');
        game.canvas.oncontextmenu = function (e) { e.preventDefault(); } // Prevent Right Click Pop-ups
    }
}

//------------------------------------------------------------------//
// State: Start
// - Handles the start screen
//------------------------------------------------------------------//

// define Start state and method
gameStates.Start = function(game){};
gameStates.Start.prototype = {
    create: function(){
        //start = game.add.tileSprite(0 , 0, 1000, 1000, 'start');
        titleText = game.add.text(gameScreenProperties.width/2, 280, 'This game uses fullscreen for optimal fitting.', { fontSize: '45px', fill: '#FFF', align: 'center' });
        titleText.anchor.x = .5;
        titleText = game.add.text(gameScreenProperties.width/2, 330, '-Click anywhere to Start and Enable.-', { fontSize: '45px', fill: '#FFF', align: 'center' });
        titleText.anchor.x = .5;
        console.log('Start: create');
    },
    update: function(){
        //start.tilePosition.x -=4;
        //start.tilePosition.y -=2;
        //fullscreen
        game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
        game.input.onDown.add(gofull, this);
        
        //----FUNCTION: goFull----//
        
        function gofull() {
            //game.state.start('MainMenu');
            game.state.start('MainMenu');
            game.scale.startFullScreen(false);
        }
    }
}

//------------------------------------------------------------------//
// State: MainMenu
// - Handles the start screen
//------------------------------------------------------------------//

// define MainMenu state and method
gameStates.MainMenu = function(game){};
gameStates.MainMenu.prototype = {
    create: function(){
        bgSky = game.add.tileSprite(0 , 0, gameScreenProperties.width, gameScreenProperties.height, 'sky');
        bgSkyCO2 = game.add.sprite(0, -1600, 'skyCO2');
        bgClouds = game.add.tileSprite(0 , 0, gameScreenProperties.width*2, gameScreenProperties.height, 'startClouds');
        bgSkyCO2.scale.setTo(2);
        bgSkyCO2Rate = 0;
        started = false;
        playedSFX = false;
        title = game.add.sprite(0, 0, 'StartTitle');
        titleMouse = game.add.sprite(200, 600, 'titleMouse');
        titleMouse.animations.add('select', [0,1,0,1], 2, true);
        titleMouse.animations.add('started', [2], 8, true);
        titleMouse.animations.play('select');
        this.camera.flash('#000000');
        bgmPlay('bgmTitle', 1);
        console.log('MainMenu: create');
    },
    update: function(){
        bgSky.tilePosition.x -=4;
        bgSky.tilePosition.y -=2;
        bgClouds.tilePosition.x -= 2;

        game.input.onDown.add(openTheGame, this);
        
        if (started){
            if (bgSkyCO2.y < -100) bgSkyCO2.y += bgSkyCO2Rate;
            bgSkyCO2Rate += 0.4;
            if (bgSkyCO2.y >= -100){
                bgmStop();
                if (!playedSFX) {
                    sfxPlay('sfxBoom', 1);
                    playedSFX=true;
                    this.camera.fade('#FFFFFF', 2000);
                    this.camera.onFadeComplete.add(letUsStartTheGame,this);
                }
            }
        }
        
        //----FUNCTION: openTheGame----//
        
        function openTheGame() {
            started = true;
            titleMouse.animations.play('started');
        }
        
        function letUsStartTheGame() {
            game.time.events.add(Phaser.Timer.SECOND, function() { game.state.start('Game')});
        }
    }
}

//------------------------------------------------------------------//
// State: Play
// - Handles the core game loop
//------------------------------------------------------------------//

// define Game state and methods
gameStates.Play = function(game){};
gameStates.Play.prototype = {

    //====Game: PRELOAD====//
    
    preload: function() {
        // preload assets
        console.log("Game: preload")
    },
    
    //====Game: CREATE====//
    
    create: function(){
        this.camera.flash('#000000', 1000);
        money = 10000;
        death = false;
        win = false;
        buildingPlaced = false;
        bgmPlaying = false;

        startGlobalEvents();
        bgmPlay('bgm', .25);
        
        //add sky
        sky = game.add.sprite(100, 0, 'sky');
        skyCO2 = game.add.sprite(100, -700, 'skyCO2');
        
        bgClouds = game.add.tileSprite(0 , 0, gameScreenProperties.width, gameScreenProperties.height/2, 'startClouds');
        
        buildings = game.add.group();
        city = buildings.create(600, 300, 'city');
        city2 = buildings.create(100, 300, 'city');
        co2clouds1 = game.add.sprite(100, -400, 'co2clouds1');
        co2clouds2 = game.add.sprite(200, -400, 'co2clouds2');
        co2clouds3 = game.add.sprite(0, -400, 'co2clouds3');
        co2GoRight = true;
        curtain = game.add.sprite(100, -800, 'curtain');
        cloud = game.add.sprite(0, 0, 'clouds');
        cloudGoUp = -.1;
        
        //cloud2 = game.add.sprite(100, 0, 'cloud');
        
        sideUI = game.add.sprite(0,0, 'hudSidebars');
        sideUI.scale.setTo(.5);
        
        gaugeCO2 = game.add.sprite(25,75, 'gaugeCO2');
        gaugeCO2.scale.setTo(1,0);
        percentageCO2 = 0;
        
        gaugeCO2Loss = game.add.sprite(25,75, 'gaugeCO2Loss');
        gaugeCO2Loss.scale.setTo(1,0);
        
        //bUI = game.add.sprite(1000, 0, 'controlpanel');
        //bUI.scale.setTo(.5);
        
        tileInfoUI = game.add.sprite(0, gameScreenProperties.height - (gridTileSize * (gridHeight+1)), 'hudInfobox');
        tileInfoUI.scale.setTo(.5);
        
        actionInfoUI = game.add.sprite(gameScreenProperties.width - 300, gameScreenProperties.height - (gridTileSize * (gridHeight+1)), 'hudInfobox');
        actionInfoUI.scale.setTo(.5);
        
        moneyInfoUI = game.add.sprite(gameScreenProperties.width - 300, gameScreenProperties.height - (gridTileSize * (gridHeight+2)), 'hudMoney');
        moneyInfoUI.scale.setTo(.5);
        
        resourceUI = game.add.sprite(300, gameScreenProperties.height - (gridTileSize * (gridHeight+1)),'hudResources');
        resourceUI.scale.setTo(.5);
        
        //add grid
        
        var j = 0;
        for(var x = gridOffsetX; x < gridOffsetX + (gridWidth * gridTileSize); x+= gridTileSize)
        {
            for(var y = gameScreenProperties.height - (gridTileSize * gridHeight); y < gameScreenProperties.height; y += gridTileSize)
            {
                var key;
                var i = game.rnd.integerInRange(1,10);
                if(i <= 5)
                {
                    key = 'grass';
                }
                else if((i > 5) && (i <= 8))
                {
                    key = 'mountain';
                }
                else
                {
                    key = 'water';
                }
                button = new Tile(game, key, x , y, 'none', null, j);
                j++;
            }
        }
        
        //intialize grid arrays to zero
        for(var i = 0; i < gridMaxSize; i++)
        {
            totalIncome[i] = 0;
            power[i] = 0;
            isOccupied[i] = false;
            totalPollution[i] = 0;
        }
        residualPollution = 0;
        
        coalCost = 1500;
        oilCost = 4000;
        solarCost = 2000;
        windCost = 3000;
        hydroCost = 5000;
        nuclearCost = 6000;
        
        //button prefabs
        //game, key, xposition, yposition, power generated, money generated, maintenance timer, install cost, repair cost, starting amount of factories, pollution
        
        solar =     new PowerSource( game ,'solar', 1150, 450, 2, 10, 4, solarCost, 4, 0, 0);
        coal =      new PowerSource( game ,'coal', 1150, 150, 10, 30, 4, coalCost, 4, 0, 10);
        wind =      new PowerSource( game ,'wind', 1150, 350, 30, 90, 4, windCost, 4, 0, 0);
        oil =      new PowerSource( game ,'oil', 1150, 250, 35, 120, 4, oilCost, 4, 0, 20);
        hydro =      new PowerSource( game ,'hydro', 1150, 550, 70, 140, 4, hydroCost, 4, 0, 0);
        nuclear =   new PowerSource( game ,'nuclear', 1150, 650, 60, 240, 4, nuclearCost, 4, 0, 10);
        //sell = new PowerSource( game ,'sell', 150, 650);
        //repair = new PowerSource( game, 'repair', 250, 650);
        
       
        moneyText = game.add.text(1070, gameScreenProperties.height - 445, money, { fontSize: '32px', fill: '#000', align: 'right' });
        moneyText.anchor.y = .5;
        revenueText = game.add.text(370, gameScreenProperties.height - 345, '+0v' + money, { fontSize: '24px', fill: '#000' });
        revenueText.anchor.y = .5;
        incomeText = game.add.text(520, 100, '', { fontSize: '32px', fill: '#00FF00' });
        powerText = game.add.text(570, gameScreenProperties.height - 345, '0' , { fontSize: '24px', fill: '#000' });
        powerText.anchor.y = .5;
        pollutionText = game.add.text(770, gameScreenProperties.height - 345, 'AQI' , { fontSize: '24px', fill: '#000' });
        pollutionText.anchor.y = .5;
        
        
        circledVoltage = game.add.sprite(0, 0, 'loseVoltageCircle');
        circledVoltage.scale.setTo(0);

    },
    
    //====Game: UPDATE====//
    
    //increases money based off the number of sources
    update: function() {
         
        bgClouds.tilePosition.x -= 2;
        cloud.y += cloudGoUp;
        if (cloud.y >= 0){
            cloudGoUp = -.1;
        }
        else if (cloud.y <= -20){
            cloudGoUp = .1;
        }


        /*
        var temp = 0;
        pollution = 0;
        for(var i = 0; i < 25; i++)
        {
            temp += power[i];
            pollution += totalPollution[i];
        }
        
        pollution = pollution * .001;
        voltage = temp;
        
        powerText.text = 'Power Generated: ' + voltage + ' Volts';  
        */
        
        
        //update money
        moneyText.text = money;
        revenueText.text = '+' + revenue + '/s';
        voltage = 0;
        pollution = 0;
        for(var i = 0; i < gridMaxSize; i++)
        {
            voltage += power[i];
            pollution += totalPollution[i];
        }
        voltageText = Math.round(voltage / voltageWinCondition * 100);
        powerText.text = voltageText + '%';
        pollutionText.text = pollution + 'aqi';
        
        if (voltage >= voltageWinCondition && pollution <= 0 && !win){
            win = true;
            bgmStop();
            sfxPlay('sfxWin', 1);
            this.camera.fade('#000000', 4000);
            this.camera.onFadeComplete.add(winGame,this);
        }

        if(buildingPlaced && voltage == 0 && !death && !win)
        {
            //game.state.start('GameOver');
            death = true;
            deathCause = 'powerless';
            bgmStop();
            sfxPlay('sfxBoom', 1);
            this.camera.fade('#000000', 4000);
            this.camera.onFadeComplete.add(endGame,this);
        }
        
        if (co2clouds1.x >= 200){
            co2GoRight = false;
        }
        else if (co2clouds1.x <= 0){
            co2GoRight = true;
        }
        
        switch(co2GoRight){
            case true:
                co2clouds1.x += .5;
                co2clouds2.x += .3;
                co2clouds3.x += .2;
                break;
            case false:
                co2clouds1.x -= .5;
                co2clouds2.x -= .3;
                co2clouds3.x -= .2;
                break;
        }
        
        pollution = pollution * .002;
        if(co2clouds1.y >= -400)
        {
            pollution += .0001;
        }

        if(co2clouds1.y < 300)
        {
            skyCO2.y += (pollution+residualPollution);
            co2clouds1.y+= (pollution+residualPollution);
            co2clouds2.y+= (pollution+residualPollution);
            co2clouds3.y+= (pollution+residualPollution);
            percentageCO2 = ((co2clouds1.y+400) / 700);
        }
        else if (!death && !win)
        {
            //scream.play();
            death = true;
            deathCause = 'co2';
            bgmStop();
            sfxPlay('sfxBoom', 1);
            this.camera.fade('#000000', 4000);
            this.camera.onFadeComplete.add(endGame,this);
            //sfxPlay('scream',.5);
            //game.state.start('GameOver');
        }
        
        gaugeCO2.scale.setTo(1,percentageCO2);
        
        if (buildingPlaced && percentageCO2 >= .5)
        {
            if(!bgmPlaying)
            {
                bgmPlaying = true;
                bgmStop();
                bgmPlay('bgm2', .25);
                //bgmPlay('bgm2', 1);
            }
        }
        
        if (death && !win) {
            if (deathCause == 'co2') gaugeCO2Loss.scale.setTo(1,1);
            if (deathCause == 'powerless') circledVoltage.scale.setTo(1);
            if (curtain.y < 0) {
                curtain.y += 20;
            }
        }

        /*
        //if an icon is clicked set the position to the mouse
        if(windExist || coalExist || hydroExist || nuclearExist || solarExist || sellExist || oilExist || repairExist)
        {
            iconTemp.x = game.input.mousePointer.x;
            iconTemp.y = game.input.mousePointer.y;
        }
        */
        if(voltage == 0)
        {
            city.frame = 0;
            city2.frame = 0;
        }
        else if(voltage >= 0 && voltage < voltageWinCondition/3)
        {
            city.frame = 1;
            city2.frame = 1;
        }
        else if(voltage >= (voltageWinCondition/3) && voltage < (voltageWinCondition/3)*2)
        {
            city.frame = 2;
            city2.frame = 2;
        }
        else if(voltage >= voltageWinCondition/3*2 && voltage < voltageWinCondition)
        {
            city.frame = 3;
            city2.frame = 3;
        }
        else if(voltage >= voltageWinCondition)
        {
            city.frame = 4;
            city2.frame = 4;
        }
        
        function endGame() {
            game.time.events.add(Phaser.Timer.SECOND, function() { game.state.start('GameOver')});
        }
        
        function winGame() {
            game.time.events.add(Phaser.Timer.SECOND, function() { game.state.start('Win')});
        }
    }
}

//------------------------------------------------------------------//
// State: GameOver
// - Handles the lose screen
//------------------------------------------------------------------//

// define GameOver state and methods
/* 
Add a win state based off whether the player has full power and no non-renewable sources
Store a boolean to check and call a timer so the game state change isn't immediate
*/
gameStates.GameOver = function(game){};
gameStates.GameOver.prototype = {
	create: function(){
		console.log('GameOver: create');
        bgmStop();
        this.camera.flash('#000000', 1000);
        bgSky = game.add.sprite(0, 0, 'skyLose');
        switch(deathCause){
            case 'co2':
                loseText = game.add.sprite(0, 0, 'loseTextCO2');
                break;
            case 'powerless':
                loseText = game.add.sprite(0, 0, 'loseTextPowerless');
                break;
            default:
                loseText = game.add.sprite(0, 0, 'loseTextCO2');
                break;
         }
        
        restartMouse = game.add.sprite(200, 600, 'restartMouse');
        restartMouse.animations.add('select', [0,1,0,1], 2, true);
        restartMouse.animations.add('started', [2], 8, true);
        restartMouse.animations.play('select');
        started = false;
        playedSFX = false;
        
	},
	update: function(){
        game.input.onDown.add(openTheGame, this);
        
        if (started){
            bgmStop();
            if (!playedSFX) {
                sfxPlay('sfxBoom', 1);
                playedSFX=true;
                this.camera.fade('#FFFFFF', 2000);
                this.camera.onFadeComplete.add(letUsStartTheGame,this);
            }
        }
        
        //----FUNCTION: openTheGame----//
        
        function openTheGame() {
            started = true;
            restartMouse.animations.play('started');
        }
        
        function letUsStartTheGame() {
            game.time.events.add(Phaser.Timer.SECOND, function() { game.state.start('Game')});
        }
	}
}

//------------------------------------------------------------------//
// State: Win
// - Handles the win screen
//------------------------------------------------------------------//

gameStates.Win = function(game){};
gameStates.Win.prototype = {
	create: function(){
		console.log('Win: create');
        bgmStop();
        this.camera.flash('#000000', 1000);
        bgSky = game.add.sprite(0, 0, 'skyWin');
        bgSky.animations.add('twinkle', [0,1,0,1], 5, true);
        bgSky.animations.play('twinkle');
        
        winText = game.add.sprite(0, 0, 'winText');
        
        starWin = game.add.sprite(600, 900, 'starWin');
        starWin.anchor.x = .5;
        starWin.anchor.y = .5;
        
        groundWin = game.add.sprite(0, 0, 'groundWin');
        
        restartMouse = game.add.sprite(200, 600, 'restartMouse');
        restartMouse.animations.add('select', [0,1,0,1], 2, true);
        restartMouse.animations.add('started', [2], 8, true);
        restartMouse.animations.play('select');
        started = false;
        playedSFX = false;
        
	},
	update: function(){
        starWin.angle += 1;
        
        game.input.onDown.add(openTheGame, this);
        
        if (started){
            bgmStop();
            if (!playedSFX) {
                sfxPlay('sfxBoom', 1);
                playedSFX=true;
                this.camera.fade('#FFFFFF', 2000);
                this.camera.onFadeComplete.add(letUsStartTheGame,this);
            }
        }
        
        //----FUNCTION: openTheGame----//
        
        function openTheGame() {
            started = true;
            restartMouse.animations.play('started');
        }
        
        function letUsStartTheGame() {
            game.time.events.add(Phaser.Timer.SECOND, function() { game.state.start('Game')});
        }
	}
}

//==================================================================//
//
// game
// - Setup the game application
//
//==================================================================//

var game = new Phaser.Game(gameScreenProperties.width, gameScreenProperties.height, Phaser.AUTO);

//------------------------------------------------------------------//
// Add Game States
//------------------------------------------------------------------//

game.state.add('Preloader', gameStates.Preloader);
game.state.add('Start', gameStates.Start);
game.state.add('MainMenu', gameStates.MainMenu);
game.state.add('Game', gameStates.Play);
game.state.add('GameOver', gameStates.GameOver);
game.state.add('Win', gameStates.Win);

//------------------------------------------------------------------//
// Start Game
//------------------------------------------------------------------//

game.state.start('Preloader');